import React, { useState } from 'react';
import { usePendingOrders } from '../../hooks/usePendingOrders';
import TradingCalculator from '../../utils/TradingCalculator';

const PendingOrders = ({ position, onOrderPlaced }) => {
    const { placeOrder, isPlacingOrder, error } = usePendingOrders();

    // State to manage pending order values
    const [orderDetails, setOrderDetails] = useState({
        type: '', // buyStop, buyLimit, sellStop, sellLimit
        price: '',
        stopLoss: '',
        takeProfit: '',
        lotSize: position.lotSize,
    });

    // Initialize the trading calculator
    const calculator = new TradingCalculator(
        position.baseCurrency,
        position.quoteCurrency,
        position.lotSize,
        position.accountBalance
    );

    const handleFieldChange = (field, value) => {
        setOrderDetails({ ...orderDetails, [field]: value });
    };

    const handlePlaceOrder = async () => {
        try {
            const result = await placeOrder({ ...orderDetails, positionId: position.id });
            if (onOrderPlaced) {
                onOrderPlaced(result);
            }
        } catch (err) {
            console.error('Order placement failed:', err);
        }
    };

    return (
        <div className= "pending-orders-container" >
        <div className="field-group" >
            <label>Order Type: </label>
                < select
    value = { orderDetails.type }
    onChange = {(e) => handleFieldChange('type', e.target.value)}
        >
    <option value="" > Select Order Type </option>
        < option value = "buyStop" > Buy Stop </option>
            < option value = "buyLimit" > Buy Limit </option>
                < option value = "sellStop" > Sell Stop </option>
                    < option value = "sellLimit" > Sell Limit </option>
                        </select>
                        </div>
                        < div className = "field-group" >
                            <label>Price: </label>
                                < input
type = "number"
value = { orderDetails.price }
onChange = {(e) => handleFieldChange('price', parseFloat(e.target.value))}
        />
    </div>
    < div className = "field-group" >
        <label>Stop Loss: </label>
            < input
type = "number"
value = { orderDetails.stopLoss }
onChange = {(e) => handleFieldChange('stopLoss', parseFloat(e.target.value))}
        />
    </div>
    < div className = "field-group" >
        <label>Take Profit: </label>
            < input
type = "number"
value = { orderDetails.takeProfit }
onChange = {(e) => handleFieldChange('takeProfit', parseFloat(e.target.value))}
        />
    </div>
    < div className = "field-group" >
        <label>Lot Size: </label>
            < input
type = "number"
value = { orderDetails.lotSize }
onChange = {(e) => handleFieldChange('lotSize', parseFloat(e.target.value))}
        />
    </div>
{ error && <div className="error-message" > { error } </div> }
<button
        onClick={ handlePlaceOrder }
disabled = { isPlacingOrder }
className = "place-order-button"
    >
    { isPlacingOrder? 'Placing Order...': 'Place Order' }
    </button>
    </div>
  );
};

export default PendingOrders;
